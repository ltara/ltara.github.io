<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LTARA</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ltara.gitee.io/"/>
  <updated>2020-08-14T08:10:09.273Z</updated>
  <id>http://ltara.gitee.io/</id>
  
  <author>
    <name>lt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript基础之作用域/作用域链</title>
    <link href="http://ltara.gitee.io/posts/38149.html"/>
    <id>http://ltara.gitee.io/posts/38149.html</id>
    <published>2020-08-13T09:02:38.000Z</published>
    <updated>2020-08-14T08:10:09.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用域-作用域链"><a href="#作用域-作用域链" class="headerlink" title="作用域/作用域链"></a>作用域/作用域链</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。</p></blockquote><blockquote><p>作用域是在运行时代码中的某些特定部分中的变量，函数和对象的可访问性。换句话说，作用域决定了代码区块中变量和其他资源的可见性。</p></blockquote><p>通过定义我们可以知道，<strong>作用域就是告诉我们变量或函数存放在哪里以及怎么去获取（访问）它们。</strong></p><h3 id="LHS查询和RHS查询"><a href="#LHS查询和RHS查询" class="headerlink" title="LHS查询和RHS查询"></a>LHS查询和RHS查询</h3><ul><li><p>LHS：赋值操作的左侧</p></li><li><p>RHS：赋值操作的右侧</p></li></ul><p>简单来说，<strong>如果查找的目的是对变量赋值，那么会使用LHS查询；如果目的是获取变量的值，那么会使用RHS查询。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上代码中就存在LHS查询和RHS查询：</p><ul><li><p><code>var a = 1</code>会被分解为两步：</p><ol><li><code>var a</code>在作用域中声明变量<code>a</code>，这一步在代码执行前进行；（原理可以看看<a href="https://ltara.gitee.io/posts/56269.html">JavaScript基础之执行上下文</a>）</li><li><code>a = 1</code>会进行LHS查询，查询变量<code>a</code>，并对它进行赋值。</li></ol></li><li><p><code>console.log(a)</code>有两个RHS查询：</p><ol><li>对<code>a</code>进行RHS查询，查询<code>a</code>的值并传给<code>console.log(..)</code>;</li><li>对<code>console</code>进行RHS查询，查询<code>console</code>对象上是否有一个叫做<code>log</code>的方法。</li></ol></li></ul><p><strong>补充：</strong></p><blockquote><p>赋值操作都会导致LHS查询，<code>=</code>操作符或调用函数时出入参数的操作都会导致赋值操作。</p><p>LHS查询如果失败，会创建一个全局变量，RHS查询如果失败会报错：<code>ReferenceError</code>；如果你对查询到的值进行不合理的操作，比如试图对一个非函数类型的值进行函数调用时，会报错：<code>TypeError</code></p><p><code>ReferenceError</code>同作用域的判别失败相关，而<code>TypeError</code>则代表作用域判别成功了，但是对结果的操作时非法或不合理的</p></blockquote><h3 id="全局作用域和函数作用域"><a href="#全局作用域和函数作用域" class="headerlink" title="全局作用域和函数作用域"></a>全局作用域和函数作用域</h3><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><ul><li>最外层函数和在最外层函数外面定义的变量拥有全局作用域</li><li>所有末定义直接赋值的变量自动声明为拥有全局作用域</li><li>所有<code>window</code>对象的属性和方法拥有全局作用域</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// a 为最外层函数外面定义的变量</span><span class="token comment" spellcheck="true">// b 为最外层函数</span><span class="token comment" spellcheck="true">// c 为未定义直接赋值的变量</span><span class="token comment" spellcheck="true">// window 上的属性和方法就不一一列举了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中的<code>a</code>，<code>b</code>，<code>c</code>都在全局作用域内，在全局作用域下的变量我们称之为<strong>全局变量</strong></p><p><strong>全局变量在程序的任何地方都能访问</strong></p><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><blockquote><p>属于这个函数的全部变量都可以在整个函数的范围内使用及复用（在嵌套的作用域中也可以使用）。</p></blockquote><p>函数作用域是指声明在函数内部的变量（包括函数的形参）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中的<code>a</code>，<code>b</code>都是在函数作用域内，在函数作用域内的变量我们称之为<strong>局部变量</strong>（块级作用域的变量也是局部变量，后面谈）</p><p><strong>局部变量只能在它本身以及它内部的作用域内才能被访问</strong></p><h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><h4 id="在ES6之前"><a href="#在ES6之前" class="headerlink" title="在ES6之前"></a>在ES6之前</h4><p>JavaScript不支持块作用</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bar <span class="token operator">=</span> foo <span class="token operator">*</span> <span class="token number">2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码，for里的<code>i</code>变量和if块里的<code>bar</code>变量都属于外部作用域。</p><ul><li><code>with</code>是块作用域的一个例子，具体可以参考下文中的<a href="#jump">欺骗词法作用域</a></li><li><code>try/catch</code>的分句<code>catch</code>会创建一个块作用域，其中声明的变量仅在<code>catch</code>内部有效</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">// 抛出一个异常</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123 能够正常的执行</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ReferenceError: error not found</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ES6之后"><a href="#ES6之后" class="headerlink" title="ES6之后"></a>ES6之后</h4><p><code>let</code>和<code>const</code>关键字可以将变量绑定到任意作用域中（通常是 {..} 内部）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ReferenceError</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> bar <span class="token operator">=</span> foo <span class="token operator">*</span> <span class="token number">2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ReferenceError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于作用域的限制，每段独立的执行代码块只能访问自己作用域和外层作用域中的变量，无法访问到内层作用域的变量。</p></blockquote><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><blockquote><p>当可执行代码内部访问变量时，会先查找本地作用域，如果找到目标变量即返回，否则会去父级作用域继续查找…一直找到全局作用域。我们把这种作用域的嵌套机制，称为作用域链。</p></blockquote><h3 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">bar</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2, 4, 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中有三个逐级嵌套的作用域，气泡表示：</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/22/1723a816c2f59e4f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="作用域嵌套"></p><ol><li>包含着整个全局作用域，其中只有一个标识符：<code>foo</code></li><li>包含着<code>foo</code>所创建的作用域，其中有三个标识符：<code>a</code>、<code>bar</code>和<code>b</code></li><li>包含着<code>bar</code>所创建的作用域，其中只有一个标识符：<code>c</code></li></ol><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><blockquote><p>作用域有两种工作模型。一种是<strong>词法作用域</strong>，另一种是<strong>动态作用域</strong>，JavaScript采用的便是词法作用域。</p></blockquote><blockquote><p>词法阶段：大部分标准语言编译器的第一个工作阶段叫做词法化。词法化的过程会对源代码中的字符进行检查，如果时有状态的解析过程，还会赋予单词语义。</p></blockquote><p><strong>词法作用域就是定义在词法阶段的作用域</strong>。</p><p>换句话说，<strong>词法作用域是由你在写代码时将变量和块作用域写在哪里决定的</strong>。</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><blockquote><p>作用域查找会从内部向外部逐级查找，在找到第一个匹配的标识符时停止。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码输出什么？</p><p>根据作用域的查找规则，结果为 <code>2</code></p><p>上面的代码很容易理解，就是按照作用域链或者说作用域气泡的方式一层层的往外部查找变量<code>value</code>，找到即停止并执行<code>console.log(..)</code>输出操作。</p><p>那么观察下面的代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">2</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码输出什么？</p><ul><li><p>全局作用域有三个标识符：<code>value</code>，<code>foo</code>，<code>bar</code></p></li><li><p>foo函数作用域没有标识符</p></li><li><p>bar函数作用域有一个标识符：<code>value</code></p></li></ul><p>根据词法作用域的定义可知，结果为 <code>1</code>：</p><ol><li><code>bar()</code>函数执行，函数内声明了<code>value</code>变量并赋值为2，接着<code>foo()</code>函数执行</li><li><code>foo()</code>函数执行，执行<code>console.log(..)</code>方法，查找<code>value</code>变量并输出其值，<ol><li>按照作用域的查找规则，首先在<code>foo</code>函数内部查找，<code>foo</code>函数内部没有找到，则去其外部作用域查找</li><li>它的外部作用域为全局作用域，存在<code>value</code>变量，其值为<code>1</code></li></ol></li></ol><p>在这个过程中，并没有bar函数作用域的参与，可见<strong>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定</strong>。</p><p><strong>补充：</strong></p><blockquote><p>词法作用域查找只会查找一级标识符，比如a，b，c。如果代码中引用了foo.bar.baz，词法作用域查找只会试图查找foo标识符，找到这个变量后，对象属性访问规则会分别接管对bar和baz属性的访问。</p></blockquote><h4 id="欺骗词法作用域"><a href="#欺骗词法作用域" class="headerlink" title="欺骗词法作用域"></a><span id="jump">欺骗词法作用域</span></h4><p><strong>欺骗词法作用域会导致性能下降，不要使用它们</strong></p><h5 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">'var b = 3'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1, 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>eval(..)</code>调用中的<code>'var b = 3'</code>这段代码会被当做本来就在那里一样来处理。上面的代码实际上会变成下面这样：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1, 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种做法欺骗了词法作用域的规则，使得函数声明后的作用域会被修改。</p><h5 id="with"><a href="#with" class="headerlink" title="with"></a>with</h5><ol><li><code>with</code>被当作重复引用同一个对象中的多个属性的快捷方式</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 给obj的属性重新赋值</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">4</span><span class="token comment" spellcheck="true">//使用with</span><span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>    b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>    c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>with可以将变量暴露到全局作用域</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">foo</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2, a 被暴露到全局作用域上了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中创建了<code>obj1</code>和<code>obj2</code>两个对象。其中一个有<code>a</code>属性，另一个没有。<code>foo()</code>函数接受一个<code>obj</code>参数，该参数是一个引用对象，并对这个对象执行了<code>with(obj){..}</code>。在<code>with</code>块内部我们将<code>obj</code>参数引用对象的<code>a</code>属性赋值为<code>2</code>.</p><p>当我们将<code>obj1</code>传递进去，<code>a = 2</code>赋值操作找到了<code>obj1.a</code>并将<code>2</code>赋值给它；当我们将<code>obj2</code>传递进去，<code>obj2</code>并没有<code>a</code>属性，因此不会创建这个属性，<code>obj2</code>保持<code>undefined</code>，但是我们发现<code>a = 2</code>赋值操作创建了一个全局变量<code>a</code>。</p><p>实际上，<strong>with可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的标识符</strong>。</p><p>因此在执行<code>foo(obj2)</code>时，<code>with</code>里的<code>a = 2</code>实际上相当于未声明直接赋值的变量自动声明未全局变量，如果<code>with</code>块里改为<code>var a = 2</code>，那么这个<code>a</code>相当于声明在<code>foo</code>里的一个变量。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《你不知道的JavaScript上卷》</p><p><a href="https://juejin.im/post/6844903797135769614#heading-4">深入理解JavaScript作用域和作用域链</a></p><p><a href="https://juejin.im/post/6844904165672484871#heading-21">面试官：说说作用域和闭包吧</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作用域-作用域链&quot;&gt;&lt;a href=&quot;#作用域-作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域/作用域链&quot;&gt;&lt;/a&gt;作用域/作用域链&lt;/h1&gt;&lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ltara.gitee.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://ltara.gitee.io/tags/JavaScript/"/>
    
      <category term="面试" scheme="http://ltara.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础之执行上下文</title>
    <link href="http://ltara.gitee.io/posts/56269.html"/>
    <id>http://ltara.gitee.io/posts/56269.html</id>
    <published>2020-08-13T02:32:59.000Z</published>
    <updated>2020-08-13T06:28:36.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="执行上下文-1"><a href="#执行上下文-1" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>当 <code>JS</code> 引擎解析到可执行代码片段（通常是函数调用阶段）的时候，就会先做一些执行前的准备工作，这个 <strong>“准备工作”</strong>，就叫做 <strong>“执行上下文(execution context 简称 <code>EC</code>)”</strong> 或者也可以叫做<strong>执行环境</strong>。</p><p><a href="http://ecma-international.org/ecma-262/6.0/">ES6 官方</a> 中的执行上下文定义：</p><blockquote><p>执行上下文是一种规范策略，用于跟踪ECMAScript实现对代码的运行时评估。在任何时候，最多只有一个执行上下文在实际执行代码。这被称为运行执行上下文。堆栈用于跟踪执行上下文。正在运行的执行上下文始终是这个堆栈的顶部元素。每当控制从与当前运行的执行上下文关联的可执行代码转移到与该执行上下文不关联的可执行代码时，就会创建一个新的执行上下文。新创建的执行上下文被推到堆栈上，并成为正在运行的执行上下文。</p></blockquote><h3 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h3><p><a href="http://ecma-international.org/ecma-262/6.0/">ES6 官方</a> 中的词法环境定义：</p><blockquote><p><strong>词法环境</strong>是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义<strong>标识符</strong>和具体变量和函数的关联。一个词法环境由环境记录器和一个可能的引用<strong>外部词法环境</strong>的空值组成。</p></blockquote><p>简单来说：</p><p>词法环境由<strong>环境记录</strong>与<strong>外部环境引入记录</strong>两个部分组成。</p><p>其中<strong>环境记录</strong>用于存储当前环境中的变量和函数声明的实际位置；<strong>外部环境引入记录</strong>很好理解，它用于保存自身环境可以访问的其它外部环境</p><h3 id="变量环境"><a href="#变量环境" class="headerlink" title="变量环境"></a>变量环境</h3><blockquote><p>执行上下文的LexicalEnvironment和VariableEnvironment组件始终是词法环境。创建执行上下文时，它的LexicalEnvironment和VariableEnvironment组件最初具有相同的值。</p></blockquote><p><strong>变量环境</strong> 它也是一个 <strong>词法环境</strong> ，所以它有着词法环境的所有特性。</p><p>在 <code>ES6</code> 中，<strong>词法环境</strong>组件和 <strong>变量环境</strong>组件的一个不同就是前者被用来存储函数声明和变量（<code>let</code> 和 <code>const</code>）绑定，而后者只用来存储 <code>var</code> 变量绑定。</p><p><a href="http://ecma-international.org/ecma-262/6.0/">ES6 官方</a> 对<code>var</code>和<code>let、const</code>的说明：</p><blockquote><p><code>var</code>语句声明了作用域为运行执行上下文的变量环境（VariableEnvironment）的变量。Var变量在实例化其包含的词法环境时被创建，在创建时被初始化为<code>undefined</code>。</p><p><code>let</code>和<code>const</code>声明定义了作用域为运行执行上下文的词法环境（LexicalEnvironment）的变量。变量是在实例化其包含的词法环境时创建的，但是在变量的<em>LexicalBinding</em>计算完成之前，不能以任何方式访问。由<em>LexicalBinding</em>和<em>Initializer</em>定义的变量在计算<em>LexicalBinding</em>时，而不是在创建变量时，被赋予<em>Initializer</em>的<em>AssignmentExpression</em>的值。如果let声明中的<em>LexicalBinding</em>没有<em>Initializer</em>，那么在对<em>LexicalBinding</em>求值时，将给变量分配未定义的值。</p></blockquote><p>这就解释了：</p><ul><li><code>var</code>为什么会存在<strong>变量声明提升</strong>：<code>var</code>声明的变量在创建时，会被初始化为undefined，并且可以访问；</li><li><code>let</code>和<code>const</code>为什么会存在<strong>暂时性死区</strong>：<code>let</code>和<code>const</code>声明的变量在创建时不会被初始化，此时不能以任何方式访问。</li></ul><h2 id="执行上下文类型"><a href="#执行上下文类型" class="headerlink" title="执行上下文类型"></a>执行上下文类型</h2><blockquote><p>执行上下文有三种：<code>全局执行上下文</code>、<code>函数执行上下文</code>、<code>Eval函数执行上下文</code></p></blockquote><h3 id="全局执行上下文"><a href="#全局执行上下文" class="headerlink" title="全局执行上下文"></a>全局执行上下文</h3><p>全局执行上下文只有一个，在客户端中，一般<code>由浏览器创建</code>，也就是window对象，可以通过<code>this</code>访问。</p><p>全局对象window上预定义了大量的方法和属性，我们在全局环境的任意处都能直接访问这些属性方法，同时window对象还是var声明的全局变量的载体。我们在全局环境中通过var创建的变量或函数，都可以通过window直接访问。</p><h3 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h3><p>函数执行上下文可存在无数个，每当一个函数被调用时都会创建一个函数上下文；需要注意的是，<code>同一个函数被多次调用，都会创建一个新的上下文</code>。</p><h3 id="Eval函数执行上下文"><a href="#Eval函数执行上下文" class="headerlink" title="Eval函数执行上下文"></a>Eval函数执行上下文</h3><p>执行在 <code>eval</code> 函数内部的代码也会有它属于自己的执行上下文，但由于并不经常使用 <code>eval</code>，所以在这里不做分析。</p><blockquote><p><code>eval()</code>函数会修改已经存在的词法作用域，因此不推荐使用</p></blockquote><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>当一段脚本运行起来的时候，可能会调用很多函数并产生很多函数执行上下文，那么问题来了，这些执行上下文该怎么管理呢？为了解决这个问题，<code>javascript</code> 引擎就创建了 “执行上下文栈” （<code>Execution context stack</code> 简称 <code>ECS</code>）来管理执行上下文。</p><p>顾名思义，执行上下文栈是栈结构的，因此遵循 <code>LIFO</code>（后进先出）的特性，代码执行期间创建的所有执行上下文，都会交给执行上下文栈进行管理。</p><p>当 JS 引擎开始解析脚本代码时，会首先创建一个<strong>全局执行上下文</strong>，压入栈底（这个全局执行上下文从创建一直到程序销毁，都会存在于栈的底部）。</p><p>每当引擎发现一处<strong>函数调用</strong>，就会创建一个新的<strong>函数执行上下文</strong>压入栈内，并将控制权交给该上下文，待函数执行完成后，即将该执行上下文从栈内弹出销毁，将控制权重新给到栈内上一个执行上下文。</p><h2 id="执行上下文的创建"><a href="#执行上下文的创建" class="headerlink" title="执行上下文的创建"></a>执行上下文的创建</h2><blockquote><p>执行上下文的创建主要负责三件事：<code>确定this---创建词法环境组件（LexicalEnvironment）---创建变量环境组件（VariableEnvironment）</code></p></blockquote><p>创建过程的伪代码表示：</p><pre class="line-numbers language-javascript"><code class="language-javascript">ExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 确定this的值</span>  ThisBinding <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">this</span> value<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 创建词法环境的组件</span>  LexicalEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 创建变量环境的组件</span>  VariableEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局执行上下文的创建"><a href="#全局执行上下文的创建" class="headerlink" title="全局执行上下文的创建"></a>全局执行上下文的创建</h3><p><strong>程序启动，全局上下文被创建</strong></p><ol><li><p>创建全局上下文的<strong>词法环境</strong></p><ul><li>创建<strong>对象环境记录器</strong>，它用来定义出现在全局上下文中的变量和函数的关系（<strong>负责处理 <code>let</code> 和 <code>const</code> 定义的变量</strong>）</li><li>创建<strong>外部环境引用</strong>，值为<code>null</code></li></ul></li><li><p>创建全局上下文的<strong>变量环境</strong></p><ul><li>创建<strong>对象环境记录器</strong>，它持有<strong>变量声明语句</strong>在执行上下文中创建的绑定关系（<strong>负责处理 <code>var</code> 定义的变量，初始值为 <code>undefined</code> 造成声明提升</strong>）</li><li>创建<strong>外部环境引用</strong>，值为<code>null</code></li></ul></li><li><p>确定<code>this</code>值</p><p>在浏览器中，值为全局对象<code>window</code></p></li></ol><h3 id="函数执行上下文的创建"><a href="#函数执行上下文的创建" class="headerlink" title="函数执行上下文的创建"></a>函数执行上下文的创建</h3><p><strong>函数被调用，函数上下文被创建</strong></p><ol><li><p>创建函数上下文的<strong>词法环境</strong></p><ul><li>创建<strong>声明式环境记录器</strong>，存储变量、函数和参数，它包含了一个传递给函数的 <strong><code>arguments</code></strong> 对象（此对象存储索引和参数的映射）和传递给函数的参数的 <strong>length</strong>（<strong>负责处理 <code>let</code> 和 <code>const</code> 定义的变量</strong>）</li><li>创建<strong>外部环境引用</strong>，值为全局对象或父级词法环境</li></ul></li><li><p>创建函数上下文的<strong>变量环境</strong></p><ul><li>创建<strong>声明式环境记录器</strong>，存储变量、函数和参数，它包含了一个传递给函数的 <strong><code>arguments</code></strong> 对象（此对象存储索引和参数的映射）和传递给函数的参数的 <strong>length</strong>（<strong>负责处理 <code>var</code> 定义的变量，初始值为 <code>undefined</code> 造成声明提升</strong>）</li><li>创建<strong>外部环境引用</strong>，值为全局对象或父级词法环境</li></ul></li><li><p>确定<code>this</code>值</p><p><code>this</code>的值取决于函数的调用方式，如果被一个对象调用，那么<code>this</code>指向这个对象。否则<code>this</code>一般指向全局对象<code>window</code>或者<code>undefined</code>（严格模式）</p></li></ol><h3 id="执行上下文创建过程（伪代码）"><a href="#执行上下文创建过程（伪代码）" class="headerlink" title="执行上下文创建过程（伪代码）"></a>执行上下文创建过程（伪代码）</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局执行上下文</span>GlobalExectionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// this绑定为全局对象</span>    ThisBinding<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Global Object<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 词法环境</span>    LexicalEnvironment<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//环境记录</span>      EnvironmentRecord<span class="token punctuation">:</span> <span class="token punctuation">{</span>          Type<span class="token punctuation">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 对象环境记录</span>        <span class="token comment" spellcheck="true">// 标识符绑定在这里 let const创建的变量a b在这</span>        a<span class="token punctuation">:</span> <span class="token operator">&lt;</span> uninitialized <span class="token operator">></span><span class="token punctuation">,</span>          b<span class="token punctuation">:</span> <span class="token operator">&lt;</span> uninitialized <span class="token operator">></span><span class="token punctuation">,</span>          multiply<span class="token punctuation">:</span> <span class="token operator">&lt;</span> func <span class="token operator">></span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 全局环境外部环境引入为null</span>      outer<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    VariableEnvironment<span class="token punctuation">:</span> <span class="token punctuation">{</span>        EnvironmentRecord<span class="token punctuation">:</span> <span class="token punctuation">{</span>          Type<span class="token punctuation">:</span> <span class="token string">"Object"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 对象环境记录</span>        <span class="token comment" spellcheck="true">// 标识符绑定在这里  var创建的c在这</span>        c<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 全局环境外部环境引入为null</span>      outer<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">></span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数执行上下文</span>FunctionExectionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//由于函数是默认调用 this绑定同样是全局对象</span>    ThisBinding<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Global Object<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 词法环境</span>    LexicalEnvironment<span class="token punctuation">:</span> <span class="token punctuation">{</span>        EnvironmentRecord<span class="token punctuation">:</span> <span class="token punctuation">{</span>          Type<span class="token punctuation">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 声明性环境记录</span>        <span class="token comment" spellcheck="true">// 标识符绑定在这里  arguments对象在这</span>        Arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 外部环境引入记录为&lt;/Global></span>      outer<span class="token punctuation">:</span> <span class="token operator">&lt;</span>GlobalEnvironment<span class="token operator">></span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    VariableEnvironment<span class="token punctuation">:</span> <span class="token punctuation">{</span>        EnvironmentRecord<span class="token punctuation">:</span> <span class="token punctuation">{</span>          Type<span class="token punctuation">:</span> <span class="token string">"Declarative"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 声明性环境记录</span>        <span class="token comment" spellcheck="true">// 标识符绑定在这里  var创建的g在这</span>        g<span class="token punctuation">:</span> undefined        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 外部环境引入记录为&lt;/Global></span>      outer<span class="token punctuation">:</span> <span class="token operator">&lt;</span>GlobalEnvironment<span class="token operator">></span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/6844904158957404167#heading-0">面试官：说说执行上下文吧</a></p><p><a href="https://www.cnblogs.com/echolun/p/11438363.html">一篇文章看懂JS执行上下文</a></p><p><a href="http://ecma-international.org/ecma-262/6.0/#sec-execution-contexts">ECMAScript® 2015 Language Specification</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;执行上下文&quot;&gt;&lt;a href=&quot;#执行上下文&quot; class=&quot;headerlink&quot; title=&quot;执行上下文&quot;&gt;&lt;/a&gt;执行上下文&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://ltara.gitee.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://ltara.gitee.io/tags/JavaScript/"/>
    
      <category term="面试" scheme="http://ltara.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB的基本操作（一）</title>
    <link href="http://ltara.gitee.io/posts/59980.html"/>
    <id>http://ltara.gitee.io/posts/59980.html</id>
    <published>2020-08-12T10:33:16.000Z</published>
    <updated>2020-08-13T02:24:18.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-学习之基本操作（Node）"><a href="#MongoDB-学习之基本操作（Node）" class="headerlink" title="MongoDB 学习之基本操作（Node）"></a>MongoDB 学习之基本操作（Node）</h1><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><ol><li><a href="https://www.mongodb.com/try/download/community">下载地址</a></li><li>安装：全部默认下一步就行了</li><li>安装成功</li></ol><pre class="line-numbers language-shell"><code class="language-shell"># 在命令行输入以下命令mongod --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功：<br><img src="http://pic.yupoo.com/ltara/497ac094/1743fa68.png" alt="安装成功"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>环境变量path的配置：</p><ol><li>复制bin目录</li></ol><blockquote><p>MongoDB默认会安装在C盘下的Program Files目录下</p></blockquote><p><img src="http://pic.yupoo.com/ltara/08b0101c/377e82b5.png" alt="复制bin目录"></p><ol start="2"><li>新建环境变量<br><img src="http://pic.yupoo.com/ltara/0d58a614/2978f956.png" alt="新建环境变量"></li></ol><h2 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h2><ul><li><p>启动<br>在命令行里输入<code>mongod</code>即可开启</p></li><li><p>关闭<br>在命令行里按<code>Ctrl + C</code>即可</p></li></ul><h2 id="连接和断开数据库"><a href="#连接和断开数据库" class="headerlink" title="连接和断开数据库"></a>连接和断开数据库</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><ol><li>在C盘目录下创建一个目录<code>/data/db</code>作为存储目录</li><li>在新的命令行窗口（数据库启动窗口不关）输入<code>mongo</code>即可</li><li>连接成功<br><img src="http://pic.yupoo.com/ltara/93bf791b/e517ac79.png" alt="连接成功"></li></ol><h3 id="断开数据库"><a href="#断开数据库" class="headerlink" title="断开数据库"></a>断开数据库</h3><p>在命令行窗口输入<code>exit</code>即可<br><img src="http://pic.yupoo.com/ltara/a22cecf1/646843b0.png" alt="断开连接"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>数据库</li><li>集合（在MySQL中叫数据表）</li><li>文档（在MySQL中叫记录）</li></ul><p>存储结构：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    baidu<span class="token punctuation">:</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//其他文档</span>        <span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">//其他集合</span>    <span class="token punctuation">}</span>    taobao<span class="token punctuation">:</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 其他文档</span>        <span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">//其他集合</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//其他数据库</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><code>show dbs</code><br>查看数据库目录</li><li><code>db</code><br>当前所在数据库</li><li><code>show collections</code><br>查看当前数据库集合目录</li><li><code>use 任意数据库名称（可以不存在）</code><br>切换到指定数据库，如果不存在会新建一个数据库，但是不会立即新建，只有当该数据库中有数据时，即添加文档，才会建立</li><li><code>db.collection.insert()</code><br>添加数据（文档），<code>collection</code>代指某一集合，要使用具体的集合名称，以下<code>collection</code>同义</li><li><code>db.collection.find()</code><br>查找数据（文档）</li><li><code>db.dropDatabase()</code><br>删除当前所在数据库</li><li><code>db.collection.drop()</code><br>删除集合</li></ul><p>更多命令：<br><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">菜鸟教程</a></p><h2 id="MongoDB-在-Node-中的使用"><a href="#MongoDB-在-Node-中的使用" class="headerlink" title="MongoDB 在 Node 中的使用"></a>MongoDB 在 Node 中的使用</h2><h3 id="使用-Mongoose-第三方库来使用-MongoDB"><a href="#使用-Mongoose-第三方库来使用-MongoDB" class="headerlink" title="使用 Mongoose 第三方库来使用 MongoDB"></a>使用 Mongoose 第三方库来使用 MongoDB</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/test'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>useNewUrlParser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Cat <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> String <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> kitty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Zildjian'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>kitty<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'meow'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接本机数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/test'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> useNewUrlParser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设计集合结构</span><span class="token keyword">const</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将文档结构发布为模型</span><span class="token keyword">const</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="增（添加数据）"><a href="#增（添加数据）" class="headerlink" title="增（添加数据）"></a>增（添加数据）</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//实例化一个User对象admin</span><span class="token keyword">const</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token string">'admin2@admin.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> admin2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin2'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'1234567'</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token string">'admin2@admin.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将admin对象存储到数据库</span>admin<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查（查询数据）"><a href="#查（查询数据）" class="headerlink" title="查（查询数据）"></a>查（查询数据）</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 查询所有</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询结果</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 按条件查询所有</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询结果</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 按条件查询单个</span>User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询结果</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删（删除数据）"><a href="#删（删除数据）" class="headerlink" title="删（删除数据）"></a>删（删除数据）</h5><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 删除单个数据</span>User<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     username<span class="token punctuation">:</span> <span class="token string">'admin2'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除所有符合条件的数据</span>User<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//旧版本API</span>User<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="改（更新数据）"><a href="#改（更新数据）" class="headerlink" title="改（更新数据）"></a>改（更新数据）</h5><pre class="line-numbers language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    password<span class="token punctuation">:</span> <span class="token string">'12345'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回操作结果（成功与否）</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User<span class="token punctuation">.</span><span class="token function">findOneAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    password<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回更新之前的数据</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MongoDB-学习之基本操作（Node）&quot;&gt;&lt;a href=&quot;#MongoDB-学习之基本操作（Node）&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 学习之基本操作（Node）&quot;&gt;&lt;/a&gt;MongoDB 学习之基本操作（Node）&lt;/
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://ltara.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="http://ltara.gitee.io/tags/MongoDB/"/>
    
  </entry>
  
</feed>
